name: Java CD

on:
  pull_request:
    branches: [ develop ]
    # 다음 파일들이 변경되었을 때는 워크플로우를 실행하지 않음
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 워크플로우가 실행되는 러너(가상 머신)에 해당 리포지토리의 코드를 클론하기 위해 사용
      - name: Checkout code
        uses: actions/checkout@v3

      # Gradle 의존성에 대한 캐싱 추가 (매 빌드마다 의존성을 다시 다운로드하게 되어 빌드 시간이 길어지는 걸 방지)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}

      # 2) JDK 17 버전 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4) gradlew 실행 권한 부여 및 빌드 시작
      - name: Grant gradlew permission and build
        run: |
          chmod +x gradlew
          ./gradlew clean build

      # 5) SSH 터널링 설정 (RDS 연결)
      - name: Set up SSH tunnel to RDS
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_PRIVATE_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          # 백그라운드에서 SSH 터널 실행
          ssh -o StrictHostKeyChecking=no -fN -L 3306:$RDS_ENDPOINT:3306 $EC2_USERNAME@$EC2_HOST -i ~/.ssh/ec2_key.pem

      # 6) Docker Hub 로그인 (프라이빗 레포지토리 접근)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7) Docker Compose 빌드 및 푸시 (이미지 이름 명시)
      - name: Build and push with Docker Compose
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" > .env

          docker compose -f docker-compose-dev.yml build
          docker compose -f docker-compose-dev.yml push

      # 8) docker-compose-dev.yml, .env 파일 EC2로 복사
      - name: Copy compose files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: |
            docker-compose-dev.yml
            .env
          target: "~"

      # 9) EC2에서 Docker Compose 실행 및 배포
      - name: Deploy to EC2 and start containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            docker compose -f ~/docker-compose-dev.yml down || true
            
            docker compose -f ~/docker-compose-dev.yml up -d --remove-orphans
            
            docker image prune -af  # 불필요한 이미지 정리 (선택)
